using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;


// PasswordAnalysis.cs
// 2013-Dec-30 by Jonathan Lampe, CISSP
//
// When run with the "parseIISlog" argument, reads in an IIS log
// and parses one of the elements (assumed to be the query string)
// into username and password components.  Unique username/password
// combos are then written into a tab-delimited file (for consumption
// using the "gradepasswords" argument)
// 
// When run with the "gradepasswords" argument, reads in a
// tab-delimited file filled with username/password combinations
// and generates a CSV file filled with line-by-line statistics
// (see CSV headers for complete list of statistics)

namespace PasswordStatistics
{
    class Program
    {
        static void Main(string[] args)
        {

            string Command = "";
            string InputPath = "";
            string OutputPath = "";
            string DictPath = "";
            string KeyPath = "";
            try
            {
                Console.ForegroundColor = ConsoleColor.Gray;
                Command = args[0];
                InputPath = args[1];
                OutputPath = args[2];
                if (Command.ToLower().Contains("gradepasswords"))                
                {
                    DictPath = args[3];
                    KeyPath = args[4];
                }
                Console.ForegroundColor = ConsoleColor.DarkGray;
                Console.WriteLine("Command=" + Command);
                Console.WriteLine("InputPath=" + InputPath);
                Console.WriteLine("OutputPath=" + OutputPath);
                Console.WriteLine("DictPath=" + DictPath);
                Console.WriteLine("KeyPath=" + KeyPath);
                Console.ForegroundColor = ConsoleColor.Gray;
            }
            catch (Exception e)
            {
                DisplayErrorAndHelp(e.ToString());
                return;
            }

            int counter = 0;
            string line = "";
            string sQueryString = "";
            string[] ParsedLine = null;
            string[] ParsedArgs = null;
            //string OneArg = null;
            string[] OneArgParsed = null;
            string[] saUserAndPass = null;
            string Username = "";
            string Password = "";
            string HashKey = "";
            Hashtable hashtable = new Hashtable();
            bool bPerformedValidAction = false;
            string sUPDelimiter = "\t";
            string sInitialPassword = "Starter";
            System.IO.StreamReader fileIn = null;

            // Parse the IIS log, output a file full of username/password combinations
            if (Command.ToLower().Contains("parseiislog"))
            {
                bPerformedValidAction = true;
                // Read the file and parse it line by line.
                fileIn = new System.IO.StreamReader(InputPath);
                while ((line = fileIn.ReadLine()) != null)
                {
                    Username = "";
                    Password = "";
                    try
                    {
                        ParsedLine = line.Split(' ');
                        // \\SERVER\logs\LogFiles\W3Folder\f131218.log:2013-11-18 23:12:39 10.10.10.10 POST /app3/pass.php UserName=starthere...
                        sQueryString = ParsedLine[5];
                        Console.WriteLine(sQueryString);
                        ParsedArgs = sQueryString.Split('&');
                        foreach (string OneArg in ParsedArgs)
                        {
                            OneArgParsed = OneArg.Split('=');
                            if (OneArgParsed[0].ToLower().StartsWith("username"))
                            {
                                Username = HttpUtility.UrlDecode(OneArgParsed[1].ToLower());                                
                            }
                            if ((Username.Length > 0) && OneArgParsed[0].ToLower().Contains("password"))
                            {
                                Password = HttpUtility.UrlDecode(OneArgParsed[1]);
                                HashKey = Username + "||" + Password;
                                if (!hashtable.ContainsKey(HashKey))
                                {
                                    hashtable[HashKey] = Password;
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        Console.WriteLine(e.ToString());
                        Console.ForegroundColor = ConsoleColor.Gray;
                    }
                    counter++;
                }
                fileIn.Close();

                // Now write the results out
                System.IO.StreamWriter fileOut = new System.IO.StreamWriter(OutputPath, false);
                foreach (DictionaryEntry entry in hashtable)
                {
                    // Deconstruct each entry
                    Username = entry.Key.ToString().Replace("||" + entry.Value, "");
                    Password = entry.Value.ToString();
                    if (Password.Length > 0)
                    {
                        fileOut.WriteLine(Username + sUPDelimiter + Password);
                    }
                }
                fileOut.Close();
            }

            int iPassLen = 0;
            int iPassUpperCount = 0;
            int iPassLowerCount = 0;
            int iPassNumberCount = 0;
            int iPassSpecialCount = 0;
            bool bLikeInitialPassword = false;
            bool bLikeWordPassword = false;
            bool bContainsYear = false;
            bool bContainsDictWord = false;
            bool bContainsKeyWord = false;
            bool bSimilarToUsername = false;
            Hashtable hashDictWords = new Hashtable();
            Hashtable hashKeyWords = new Hashtable();
            string sOneDictWord = "";
            string sOneKeyWord = "";
            string CSLDelim = ",";

            // Take the file full of username/password combinations and perform some analysis on it
            if (Command.ToLower().Contains("gradepasswords"))
            {
                bPerformedValidAction = true;

                // Read the dictionary file into a local hashtable
                fileIn = new System.IO.StreamReader(DictPath);
                while ((line = fileIn.ReadLine()) != null)
                {
                    sOneDictWord = line.Trim().ToLower();
                    // Ignore very short words
                    if (sOneDictWord.Length >= 4)
                    {
                        if (!hashDictWords.ContainsKey(sOneDictWord))
                        {
                            hashDictWords[sOneDictWord] = sOneDictWord;
                        }
                    }
                }
                fileIn.Close();

                // Read the keyboard file into a local hashtable
                fileIn = new System.IO.StreamReader(KeyPath);
                while ((line = fileIn.ReadLine()) != null)
                {
                    sOneKeyWord = line.Trim().ToLower();
                    // Ignore very short words (not used)
                    if (sOneKeyWord.Length >= 1)
                    {
                        if (!hashKeyWords.ContainsKey(sOneKeyWord))
                        {
                            hashKeyWords[sOneKeyWord] = sOneKeyWord;
                        }
                    }
                }
                fileIn.Close();

                // Read the input file and parse it line by line.
                // Also open the output file - we'll be writing to it bit by bit
                fileIn = new System.IO.StreamReader(InputPath);
                System.IO.StreamWriter fileOut = new System.IO.StreamWriter(OutputPath, false);

                // Write out CSV header
                fileOut.WriteLine(
                    "Length" + CSLDelim +
                    "CharUpper" + CSLDelim +
                    "CharLower" + CSLDelim +
                    "Char0-9" + CSLDelim +
                    "CharSpecial" + CSLDelim +
                    "ContainsUpper" + CSLDelim +
                    "ContainsLower" + CSLDelim +
                    "Contains0-9" + CSLDelim +
                    "ContainsSpecial" + CSLDelim +
                    "ContainsYear" + CSLDelim +
                    "SimilarToInitial" + CSLDelim +
                    "SimilarToUsername" + CSLDelim +
                    "ContainsWordPass" + CSLDelim +
                    "ContainsDictionaryWord" + CSLDelim +
                    "ContainsKeyboardSequence" + CSLDelim);
                
                while ((line = fileIn.ReadLine()) != null)
                {
                    try
                    {
                        saUserAndPass = line.Split(Convert.ToChar(9));
                        Username = saUserAndPass[0];
                        Password = saUserAndPass[1].Trim();
                        if (Password == sInitialPassword)
                        {
                            //DisplayDebug("Ignoring initial password.");
                        }
                        else
                        {
                            // Length and complexity
                            iPassLen = Password.Length;
                            iPassUpperCount = CountInstances(Password, "A-Z");
                            iPassLowerCount = CountInstances(Password, "a-z");
                            iPassNumberCount = CountInstances(Password, "0-9");
                            iPassSpecialCount = iPassLen - iPassUpperCount - iPassLowerCount - iPassNumberCount;
                            // Similar to initial password
                            bLikeInitialPassword = false;
                            if (Password.ToLower().Contains("welcome"))
                            {
                               bLikeInitialPassword = true;
                            }
                            // Contains the word "password" (or "pass")
                            bLikeWordPassword = false;
                            if (Password.ToLower().Contains("pass"))
                            {
                                bLikeWordPassword = true;
                            }
                            // Related to year - contains toward the end "13" or "2013" anywhere
                            bContainsYear = false;
                            if (Password.ToLower().Contains("2013"))
                            {
                                bContainsYear = true;
                            }
                            if (Password.ToLower().IndexOf("13") > Password.Length - 5)
                            {
                                bContainsYear = true;
                            }
                            // Uses a dictionary word
                            bContainsDictWord = PhraseContainsPhraseFromList(Password.ToLower(), hashDictWords);
                            // Uses a keyboard phrase
                            bContainsKeyWord = PhraseContainsPhraseFromList(Password.ToLower(), hashKeyWords);
                            // Similar to username
                            bSimilarToUsername = PhraseContainsPhrasePart(Username, Password, 4);

                            // Quick output to screen
                            Console.WriteLine(Username + ":" + Password + " " +
                                " AZ:" + iPassUpperCount.ToString() +
                                " az:" + iPassLowerCount.ToString() +
                                " 09:" + iPassNumberCount.ToString() +
                                " #$:" + iPassSpecialCount.ToString() +
                                " YY:" + OneZero(bContainsYear) +
                                " Ini:" + OneZero(bLikeInitialPassword) +
                                " Usr:" + OneZero(bSimilarToUsername) +
                                " Pwd:" + OneZero(bLikeWordPassword) +
                                " Dic:" + OneZero(bContainsDictWord) +
                                " Key:" + OneZero(bContainsKeyWord)  
                                );


                            try
                            {
                                // Also write out to CSV file
                                fileOut.WriteLine(
                                    Password.Length.ToString() + CSLDelim +
                                    iPassUpperCount.ToString() + CSLDelim +
                                    iPassLowerCount.ToString() + CSLDelim +
                                    iPassNumberCount.ToString() + CSLDelim +
                                    iPassSpecialCount.ToString() + CSLDelim +
                                    OneZero(iPassUpperCount) + CSLDelim +
                                    OneZero(iPassLowerCount) + CSLDelim +
                                    OneZero(iPassNumberCount) + CSLDelim +
                                    OneZero(iPassSpecialCount) + CSLDelim +
                                    OneZero(bContainsYear) + CSLDelim +
                                    OneZero(bLikeInitialPassword) + CSLDelim +
                                    OneZero(bSimilarToUsername) + CSLDelim +
                                    OneZero(bLikeWordPassword) + CSLDelim +
                                    OneZero(bContainsDictWord) + CSLDelim +
                                    OneZero(bContainsKeyWord) + CSLDelim);
                            }
                            catch (Exception e)
                            {
                                DisplayWarning("Could not write line: " + e.ToString());
                                Environment.Exit(0);
                            }

                        }
                    }
                    catch (Exception)
                    {
                        DisplayWarning("Could not parse line: " + line);
                    }
                }
                fileOut.Close();

            }
            
            // Suspend the screen.
            // Console.ReadLine();

            if (!bPerformedValidAction)
            {
                DisplayErrorAndHelp("Did nothing - is \"" + Command + "\" a valid command?");
            }

            return;

        }

        // Count the number of instances that match a provided regex
        // numLowerCaseChars = CountInstances("Hello$", "a-z")
        // numUpperCaseChars = CountInstances("Hello$", "A-Z")
        // numSpecialChars = CountInstances("Hello$", "$,@,€,ø")
        public static int CountInstances(string ToSearch, string format) {
            return System.Text.RegularExpressions.Regex.Matches(ToSearch, "[" + format + "]").Count;
        }

        // Display functions (error also displays help)
        public static void DisplayErrorAndHelp(string sMessage)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(sMessage);
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine("PassStat.exe -parseIISlog [inputfile] [outputfile]");
            Console.WriteLine("PassStat.exe -gradepasswords [inputfile] [outputfile] [dictionary] [keyboardpatterns]");
        }
        public static void DisplayWarning(string sMessage)
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine(sMessage);
            Console.ForegroundColor = ConsoleColor.Gray;
        }
        public static void DisplayDebug(string sMessage)
        {
            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(sMessage);
            Console.ForegroundColor = ConsoleColor.Gray;
        }

        // Displays "0" if false, "1" if true
        public static string OneZero(bool bTrue)
        {
            if (bTrue)
            {
                return "1";
            }
            else
            {
                return "0";
            }
        }
        // Displays "0" if 0 or less, "1" if > 0
        public static string OneZero(int iTry)
        {
            if (iTry > 0)
            {
                return "1";
            }
            else
            {
                return "0";
            }
        }


        // Checks to see if sPhrase contains any of the words in htPhrases.  (Note, this is case-insensitive!)  
        public static bool PhraseContainsPhraseFromList(string sPhrase, Hashtable htPhrases)
        {
            string sCheckPhrase = "";
            bool bMatched = false;
            foreach (DictionaryEntry entry in htPhrases)
            {
                sCheckPhrase = entry.Key.ToString();
                if (sPhrase.Contains(sCheckPhrase)) {
                    //DisplayDebug(" - - " + sPhrase + " matched " + sCheckPhrase + "!");
                    bMatched = true;
                    break;
                }
            }
            return bMatched;
        }

        // Checks to see if sPhrase is like sPhrase2 by comparing the two in blocks of X characters
        public static bool PhraseContainsPhrasePart(string sPhrase, string sPhrase2, int iLength)
        {
            bool bMatched = false;
            string sCheckPhrase = "";
            string sCheckPhrase2 = "";
            int i = 0;
            int j = 0;

            // This only works if the two phrases are at least as long as the minimum length
            if (sPhrase.Length >= iLength && sPhrase2.Length >= iLength)
            {
                // Outer loop: cycle through phrases of iLength length taken from sPhrase
                for (i = 0; i < sPhrase.Length - iLength; i++) {
                    sCheckPhrase = sPhrase.Substring(i,iLength).ToLower();
                    //DisplayDebug(" - - - sCheckPhrase=" + sCheckPhrase);
                    // Inner loop: cycle through phrases of iLength length taken from sPhrase2
                    for (j = 0; j < sPhrase2.Length - iLength; j++)
                    {
                        sCheckPhrase2 = sPhrase2.Substring(j, iLength).ToLower();
                        //DisplayDebug(" - - - sCheckPhrase2=" + sCheckPhrase2);
                        if (sCheckPhrase == sCheckPhrase2)
                        {
                            bMatched = true;
                            //DisplayDebug(" - - " + sPhrase + " is similar to " + sPhrase2 + "!");
                        }
                    }
                }
                return bMatched;
            }
            else
            {
                return false;
            }
        }


    }
}
